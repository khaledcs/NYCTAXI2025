@model ABC_Taxi_System.Models.Reservation

@{
    ViewBag.Title = "Update Reservation Details";
}

@if (ViewData.ContainsKey("UserType") && ViewData["UserType"].Equals("Driver") || (Model.Status != null && Model.Status != "Not Assigned" && Model.Status != "Assigned" && Model.Status != "Rejected"))
{
    <div class="alert alert-warning text-align-center" style="margin-top:20px;">
        Sorry, you do not have the permission to access this page. @ViewBag.Message<strong><a href="/Home/Index">Go Back to Home Page</a></strong>
    </div>
}
else
{
    <h2>Update Reservation Details</h2>
    if (Model.Passenger != null)
    {
        <h4>For: @Model.User_Passenger.FirstName @Model.User_Passenger.LastName | @Model.User_Passenger.Username</h4>
    }
    else
    {
        <h4>For: @Model.FirstName @Model.LastName</h4>
    }

    using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Reservation_Id)

            <div class="row">
                <div class="row" id="nameDiv">
                    <div class="col-lg-12">
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "First Name" } })
                                <i class="fas fa-user-alt"></i>
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                @Html.ValidationMessage("FNameRequired", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6">
                            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control", placeholder = "Last Name" } })
                                <i class="fas fa-user-alt"></i>
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                @Html.ValidationMessage("LNameRequired", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.PickUpDate, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpDate, new { htmlAttributes = new { @class = "form-control", placeholder = "Pick-Up Date" } })
                                <i class="fas fa-calendar-alt"></i>
                                @Html.ValidationMessageFor(model => model.PickUpDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.PickUpTime, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpTime, new { htmlAttributes = new { @class = "form-control", placeholder = "Pick-Up Time" } })
                                <i class="fas fa-clock"></i>
                                @Html.ValidationMessageFor(model => model.PickUpTime, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Vehicle, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.DropDownListFor(model => model.Vehicle, (SelectList)ViewBag.Types, "-- Select Vehicle Type --", new { @class = "form-control", id = "type" })
                                <i class="fas fa-car"></i>
                                @Html.ValidationMessageFor(model => model.Vehicle, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-3" , id="phoneDiv">
                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control", placeholder = "Phone Number" } })
                                <i class="fas fa-phone"></i>
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                                @Html.ValidationMessage("PhoneRequired", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                @if (ViewData.ContainsKey("UserType") && ViewData["UserType"].Equals("Passenger") || Model.Passenger != null)
                {
                    <input name="Passenger" value="@Model.User_Passenger.Username" type="hidden">
                    <script>
                        document.getElementById("nameDiv").classList.add("hidden");
                        document.getElementById("phoneDiv").classList.add("hidden");
                    </script>
                }

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-12">
                            <hr />
                            @Html.LabelFor(model => model.FullPickUpAddress, htmlAttributes: new { @class = "control-label" })
                            <div class="buttonInside inputWithIcon">
                                @Html.EditorFor(model => model.FullPickUpAddress, new { htmlAttributes = new { @class = "form-control", Style = "padding-right: 40px;", placeholder = "Type the Full Pick-Up Address here", Value = $"{ Model.PickUpStreetNo } { Model.PickUpRoute }, { Model.PickUpCity }, Sri Lanka" } })
                                <i class="fas fa-street-view"></i>
                                <button type="button" id="currentLocation" data-toggle="tooltip" data-placement="right" title="Input Current Location" style="padding:0; background:none; border:none;"><i class="fas fa-globe currentLocation" aria-hidden="true"></i></button>
                                @Html.ValidationMessageFor(model => model.FullPickUpAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.PickUpStreetNo, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpStreetNo, new { htmlAttributes = new { @class = "form-control", placeholder = "E.g. 23 (Optional)", id = "street_number", disabled = "disabled" } })
                                <i class="fas fa-list-ol"></i>
                                @Html.ValidationMessageFor(model => model.PickUpStreetNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-8">
                            @Html.LabelFor(model => model.PickUpRoute, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpRoute, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", placeholder = "E.g. De Fonseka Road", id = "route", disabled = "disabled" } })
                                <i class="fas fa-map-signs"></i>
                                @Html.ValidationMessageFor(model => model.PickUpRoute, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.PickUpCity, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpCity, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", placeholder = "E.g. Colombo", id = "locality", disabled = "disabled" } })
                                <i class="fas fa-map-marker-alt"></i>
                                @Html.ValidationMessageFor(model => model.PickUpCity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.PickUpProvince, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpProvince, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", placeholder = "E.g. WP", id = "administrative_area_level_1", disabled = "disabled" } })
                                <i class="fas fa-map"></i>
                                @Html.ValidationMessageFor(model => model.PickUpProvince, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.PickUpZipCode, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.PickUpZipCode, new { htmlAttributes = new { @class = "form-control", placeholder = "E.g. 20000 (Optional)", id = "postal_code", disabled = "disabled" } })
                                <i class="fas fa-thumbtack"></i>
                                @Html.ValidationMessageFor(model => model.PickUpZipCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-12">
                            <hr />
                            @Html.LabelFor(model => model.FullDropAddress, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.FullDropAddress, new { htmlAttributes = new { @class = "form-control", Style = "margin-bottom: 28px;", placeholder = "Type the Full Destination Address here", Value = $"{ Model.DropStreetNo } { Model.DropRoute }, { Model.DropCity }, Sri Lanka" } })
                                <i class="fas fa-street-view"></i>
                                @Html.ValidationMessageFor(model => model.FullDropAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.DropStreetNo, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.DropStreetNo, new { htmlAttributes = new { @class = "form-control street_number", placeholder = "E.g. 23 (Optional)", disabled = "disabled" } })
                                <i class="fas fa-list-ol"></i>
                                @Html.ValidationMessageFor(model => model.DropStreetNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-8">
                            @Html.LabelFor(model => model.DropRoute, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.DropRoute, new { htmlAttributes = new { @class = "form-control route", @readonly = "readonly", placeholder = "E.g. De Fonseka Road", disabled = "disabled" } })
                                <i class="fas fa-map-signs"></i>
                                @Html.ValidationMessageFor(model => model.DropRoute, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.DropCity, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.DropCity, new { htmlAttributes = new { @class = "form-control locality", @readonly = "readonly", placeholder = "E.g. Colombo", disabled = "disabled" } })
                                <i class="fas fa-map-marker-alt"></i>
                                @Html.ValidationMessageFor(model => model.DropCity, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.DropProvince, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.DropProvince, new { htmlAttributes = new { @class = "form-control administrative_area_level_1", @readonly = "readonly", placeholder = "E.g. WP", disabled = "disabled" } })
                                <i class="fas fa-map"></i>
                                @Html.ValidationMessageFor(model => model.DropProvince, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            @Html.LabelFor(model => model.DropZipCode, htmlAttributes: new { @class = "control-label" })
                            <div class="inputWithIcon">
                                @Html.EditorFor(model => model.DropZipCode, new { htmlAttributes = new { @class = "form-control postal_code", placeholder = "E.g. 20000 (Optional)", disabled = "disabled" } })
                                <i class="fas fa-thumbtack"></i>
                                @Html.ValidationMessageFor(model => model.DropZipCode, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>

                <input id="Latitude" name="PickUpLat" type="hidden">
                <input id="Longitude" name="PickUpLng" type="hidden">
                <input id="fee" name="Charge" type="hidden">
                <input id="OnHireDistance" name="OnHireDistance" type="hidden">
                <input id="OverallDistance" name="OverallDistance" type="hidden">

                <div class="col-md-12" style="margin-top:20px; margin-bottom:8px">
                    <div id="map" style="width:100%;height:400px;"></div>
                </div>

                <div class="row">
                    <div class="col-md-12">
                        <h4 class="col-md-2" id="distance">Distance: n/a</h4>
                        <h4 class="col-md-3" id="duration">Duration: n/a</h4>
                        <h4 class="col-md-3" id="charge">Estimated Charge (LKR): n/a</h4>
                        <p class="col-md-4" style="font-size:13px; color:red">*Note: Estimated Charge does 'not' include any waiting time charges.</p>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="form-group">
                        <div class="col-md-1">
                            <button type="submit" class="btn btn-warning" style="margin-top: 20px" onclick="enableFields()"><i class="fas fa-map-marked-alt"></i> Update</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index", new { Id = ViewData["Username"] })
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    AIzaSyA0fRJretMIefmzJpG7c7IVCePfcWolr6g&signed_in=true&libraries=places&callback=initMap" async defer></script>

    <script>
        var autocompletePickUp, autocompleteDrop;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            postal_code: 'short_name'
        };

        // Const bounds of Sri Lanka
        var SRI_LANKA_BOUNDS = {
            north: 10,
            south: 5.9,
            west: 79,
            east: 82,
        };

        var map = null;
        var distanceVal;
        // Note: This example requires user consent to location sharing when
        // prompted by the browser. If user see the error "The Geolocation service
        // failed.", it means user probably did not give permission for the browser to
        // use location services.
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 7.8731, lng: 80.7718 }, // Location of Sri Lanka
                restriction: {
                    latLngBounds: SRI_LANKA_BOUNDS,
                    strictBounds: false,
                },
                zoom: 10,
            });

            // Get pick-up and drop-off addresses
            var pickupLocation = '@ViewData["PickUp"]';
            var dropAddress = document.getElementById('FullDropAddress').value;

            // Convert the drop-off address into Place Id
            var geocoder = new google.maps.Geocoder();
            geocoder.geocode({ 'address': dropAddress }, function (results, status) {
                if (status === 'OK') {
                    destinationPlaceId = results[0].place_id;
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }

                // Add the traffic layer
                var trafficLayer = new google.maps.TrafficLayer();
                trafficLayer.setMap(map);

                // Add directions services and enable dragging
                directionsService = new google.maps.DirectionsService;
                directionsDisplay = new google.maps.DirectionsRenderer({ draggable: true });
                directionsDisplay.setMap(map);

                // Set the directions in the map
                directionsService.route({
                    origin: pickupLocation,
                    destination: { 'placeId': destinationPlaceId },
                    travelMode: 'DRIVING'
                }, function (response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });

                // Direction changed event
                google.maps.event.addListener(directionsDisplay, 'directions_changed', function () {
                    var directionsList = directionsDisplay.getDirections();
                    var startAddress = directionsList.routes[0].legs[0]["start_address"];
                    var destinationAddress = directionsList.routes[0].legs[0]["end_address"];

                    // Set the text field values
                    document.getElementById("FullPickUpAddress").value = startAddress;
                    document.getElementById("FullDropAddress").value = destinationAddress;

                    // Convert pick-up address to Place Id
                    geocoder.geocode({ 'address': startAddress }, function (results, status) {
                        if (status === 'OK') {
                            var origin = results[0];
                            originPlaceId = origin.place_id; // Get pick-up Place Id
                            fillInPickUpAddress(origin); // Fill in pick-up fields

                            // Get longitude and latitude values into the fields
                            document.getElementById("Latitude").value = origin.geometry.location.lat().toFixed(7);
                            document.getElementById("Longitude").value = origin.geometry.location.lng().toFixed(7);
                        } else {
                            alert('Geocode was not successful for the following reason: ' + status);
                        }
                    });

                    // Convert drop-off address to Place Id
                    geocoder.geocode({ 'address': destinationAddress }, function (results, status) {
                        if (status === 'OK') {
                            var dest = results[0];
                            destinationPlaceId = dest.place_id; // Get drop-off Place Id
                            fillInDropAddress(dest); // Fill in drop-off fields
                        } else {
                            alert('Geocode was not successful for the following reason: ' + status);
                        }
                    });

                    distance.innerText = "Distance: " + directionsList.routes[0].legs[0]["distance"]["text"]; // Set approx. distance
                    duration.innerText = "Duration: About " + directionsList.routes[0].legs[0]["duration"]["text"]; // Set approx. duration
                    distanceVal = directionsList.routes[0].legs[0]["distance"]["value"]; // Get the distance value in meters

                    var vehicleType = document.getElementById("type").value;
                    calculateCharge(vehicleType); // Set trip charge
                });

                // Set the directions in the map
                directionsService.route({
                    origin: { 'placeId': originPlaceId },
                    destination: { 'placeId': destinationPlaceId },
                    travelMode: 'DRIVING'
                }, function (response, status) {
                    if (status === 'OK') {
                        directionsDisplay.setDirections(response);
                    } else {
                        window.alert('Directions request failed due to ' + status);
                    }
                });
            });

            new AutocompleteDirectionsHandler(map);
        }

        // Calculate total trip charge
        function calculateCharge(id) {
            if (id != "") {
                $.ajax({
                    url: '/Reservations/GetVehicleTypes/' + id,
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        // Data returned successfully
                        var distanceInKm = Math.round(distanceVal / 1000); // Distance in km rounded to nearest tenth
                        var subsequentVal = (distanceInKm - 1) * 80 / 100 * data; // Charge for the subsequent distance
                        var total = subsequentVal + data; // Total trip charge
                        // Set total charge
                        charge.innerText = "Estimated Charge (LKR): " + total.toFixed(2);
                        document.getElementById("fee").value = total.toFixed(4);
                        document.getElementById("OnHireDistance").value = (distanceVal / 1000).toFixed(1);
                        document.getElementById("OverallDistance").value = (distanceVal / 1000 * 140 / 100).toFixed(1); // 40% as MOCK data
                    },
                    error: function (error) {
                        // Data could not be returned
                        alert('Trip charge could not be calculated');
                    }
                });
            }
        }

        // CurrentLocation button click event
        $("#currentLocation").click(function () {

            var infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                // Getting the current location coordinates
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    // Get longitude and latitude values into the fields
                    document.getElementById("Latitude").value = pos.lat;
                    document.getElementById("Longitude").value = pos.lng;

                    // Convert the coords into address
                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({ 'location': pos }, function (results, status) {
                        if (status === 'OK') {
                            var posi = results[0];
                            document.getElementById("FullPickUpAddress").value = posi.formatted_address; // Fill the textbox
                            fillInPickUpAddress(posi); // Fill in the fields
                            originPlaceId = posi.place_id; // Get pick-up Place Id

                            AutocompleteDirectionsHandler.prototype.route();

                        } else {
                            alert('Geocode was not successful for the following reason: ' + status);
                        }
                    });

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            function handleLocationError(browserHasGeolocation, infoWindow, pos) {
                infoWindow.setPosition(pos);
                infoWindow.setContent(browserHasGeolocation ?
                    'Error: The Geolocation service failed.' :
                    'Error: Your browser doesn\'t support geolocation.');
                infoWindow.open(map);
            }
        });

        var originPlaceId = null;
        var destinationPlaceId = null;
        var directionsService = null;
        var directionsDisplay = null;
        var travelMode = null;

        // Function for handling location auto complete
        function AutocompleteDirectionsHandler(map) {
            travelMode = 'DRIVING';
            // Add directions services and enable dragging
            directionsService = new google.maps.DirectionsService;
            directionsDisplay = new google.maps.DirectionsRenderer({ draggable: true });
            directionsDisplay.setMap(map);

            // Auto complete field for pick-up location
            autocompletePickUp = new google.maps.places.Autocomplete(
                (document.getElementById('FullPickUpAddress')),
                {
                    types: ['geocode'],
                    componentRestrictions: { country: "lk" }
                });

            // Auto complete field for drop-off location
            autocompleteDrop = new google.maps.places.Autocomplete(
                (document.getElementById('FullDropAddress')),
                {
                    types: ['geocode'],
                    componentRestrictions: { country: "lk" }
                });

            this.setupPlaceChangedListener(autocompletePickUp, 'ORIG');
            this.setupPlaceChangedListener(autocompleteDrop, 'DEST');
        }

        // PlacechangedListner
        AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function (autocomplete, mode) {
            var me = this;
            autocomplete.bindTo('bounds', map);
            // Get the Place Id from auto complete text
            autocomplete.addListener('place_changed', function () {
                var place = autocomplete.getPlace();
                if (!place.place_id) {
                    window.alert("Please select an option from the dropdown list.");
                    return;
                }
                if (mode === 'ORIG') {
                    originPlaceId = place.place_id; // Get pick-up Place Id
                    fillInPickUpAddress() // Fill in the pick-up fields

                    // Get longitude and latitude values into the fields
                    document.getElementById("Latitude").value = place.geometry.location.lat().toFixed(7);
                    document.getElementById("Longitude").value = place.geometry.location.lng().toFixed(7);
                } else {
                    destinationPlaceId = place.place_id; // Get drop-off Place Id
                    fillInDropAddress(); // Fill in the drop-off fields
                }
                me.route();
            });
        };

        // Fill in the pick-up fields
        function fillInPickUpAddress(origin) {
            var place = null;
            // Get the place details from the autocomplete object.
            if (!origin) {
                place = autocompletePickUp.getPlace();
            }
            else {
                place = origin;
            }

            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
            disableFields();
        }

        // Fill in the drop-off fields
        function fillInDropAddress(dest) {
            var place = null;
            // Get the place details from the autocomplete object.
            if (!dest) {
                place = autocompleteDrop.getPlace();
            }
            else {
                place = dest;
            }

            for (var component in componentForm) {
                document.getElementsByClassName(component)[0].value = '';
                document.getElementsByClassName(component)[0].disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementsByClassName(addressType)[0].value = val;
                }
            }
            disableFields();
        }

        // Disable fields
        function disableFields() {
            document.getElementById('route').disabled = true;
            document.getElementById('locality').disabled = true;
            document.getElementById('administrative_area_level_1').disabled = true;
            document.getElementsByClassName('route')[0].disabled = true;
            document.getElementsByClassName('locality')[0].disabled = true;
            document.getElementsByClassName('administrative_area_level_1')[0].disabled = true;
        }

        // Enable fields
        function enableFields() {
            document.getElementById('route').disabled = false;
            document.getElementById('locality').disabled = false;
            document.getElementById('administrative_area_level_1').disabled = false;
            document.getElementsByClassName('route')[0].disabled = false;
            document.getElementsByClassName('locality')[0].disabled = false;
            document.getElementsByClassName('administrative_area_level_1')[0].disabled = false;
        }

        AutocompleteDirectionsHandler.prototype.route = function () {
            if (!originPlaceId || !destinationPlaceId) {
                return;
            }

            // Set the directions in the map
            directionsService.route({
                origin: { 'placeId': originPlaceId },
                destination: { 'placeId': destinationPlaceId },
                travelMode: travelMode
            }, function (response, status) {
                if (status === 'OK') {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        };
    </script>
}