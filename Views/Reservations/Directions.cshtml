@model NYC_Taxi_System.Models.Reservation

@{
    ViewBag.Title = "Direction Details";
}

@if ((Model.User_Passenger == null && ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Passenger") ||
    (Model.User_Passenger != null && ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Passenger" &&
    ViewData.ContainsKey("Username") && ViewData["Username"].ToString() != Model.User_Passenger.Username) ||
    (Model.User_Driver == null && ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Driver") ||
    (Model.User_Driver != null && ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Driver" &&
    ViewData.ContainsKey("Username") && ViewData["Username"].ToString() != Model.User_Driver.Username))
{
    <div class="alert alert-warning text-align-center" style="margin-top:20px;">
        Sorry, you do not have the permission to access this page. @ViewBag.Message<strong><a href="/Home/Index">Go Back to Home Page</a></strong>
    </div>
}
else if (ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Driver" && Model.User_Driver.DriverVehicle == null ||
    ViewData.ContainsKey("UserType") && ViewData["UserType"].ToString() == "Driver" && Model.User_Driver.DriverLocation == null)
{
    <div class="alert alert-danger text-align-center" style="margin-top:20px;">
        You have to add your vehicle and location details into the system before accessing this page. <strong><a href="/Home/Index">Go Back to Home Page</a></strong>
    </div>
}
else
{
    <h2>Direction Details</h2>
    if (Model.Passenger != null)
    {
        <h4>For: @Model.User_Passenger.FirstName @Model.User_Passenger.LastName | @Model.User_Passenger.Username</h4>
    }
    else
    {
        <h4>For: @Model.FirstName @Model.LastName</h4>
    }
    <hr />

    <div class="row">
        <div class="col-md-12" style="margin-bottom:8px">
            <div id="map" style="width:100%;height:400px;"></div>
        </div>
    </div>

    <div id="right-panel"></div>

    <p>
        @Html.ActionLink("Back to List", "Index", new { Id = ViewData["Username"] })
    </p>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script async
            defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyA0fRJretMIefmzJpG7c7IVCePfcWolr6g&libraries=places&callback=initMap">
    </script>

    <script>
        const SRI_LANKA_BOUNDS = {
            north: 10.0,
            south: 5.9,
            west: 79.0,
            east: 82.0,
        };

        let map;
        let directionsService;
        let directionsRenderer;
        let destinationPlaceId = null;

        window.initMap = function () {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 7.8731, lng: 80.7718 },
                zoom: 10,
                restriction: {
                    latLngBounds: SRI_LANKA_BOUNDS,
                    strictBounds: false,
                }
            });

            // Add traffic layer
            const trafficLayer = new google.maps.TrafficLayer();
            trafficLayer.setMap(map);

            // Directions
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);
            directionsRenderer.setPanel(document.getElementById('right-panel'));

            const pickupLocation = '@ViewData["PickUp"]';
            const dropAddress = `@Model.DropStreetNo @Model.DropRoute, @Model.DropCity, Sri Lanka`;

            const geocoder = new google.maps.Geocoder();

            geocoder.geocode({ address: dropAddress }, function (results, status) {
                if (status === 'OK' && results.length > 0) {
                    destinationPlaceId = results[0].place_id;

                    calculateAndDisplayRoute(pickupLocation, destinationPlaceId);
                } else {
                    console.error('Geocode failed: ' + status);
                    alert('Unable to find destination address.');
                }
            });
        };

        function calculateAndDisplayRoute(origin, destinationPlaceId) {
            if (!origin || !destinationPlaceId) return;

            directionsService.route(
                {
                    origin: origin,
                    destination: { placeId: destinationPlaceId },
                    travelMode: google.maps.TravelMode.DRIVING
                },
                function (response, status) {
                    if (status === 'OK') {
                        directionsRenderer.setDirections(response);
                    } else {
                        console.error('Directions request failed due to ' + status);
                        alert('Directions request failed: ' + status);
                    }
                }
            );
        }
    </script>
}


}